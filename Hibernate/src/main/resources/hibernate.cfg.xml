<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD//EN"
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
  <session-factory>
    <property name="connection.url">jdbc:mysql://localhost:3306/test</property>
    <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
    <property name="connection.username">lilongsha</property>
    <property name="connection.password">xwthnnlkim.</property>
    <!-- 连接提供者 -->
    <property name="hibernate.connection.provider_class">org.hibernate.c3p0.internal.C3P0ConnectionProvider</property>
    <!-- 配置c3p0 开始 -->
    <property name="hibernate.c3p0.min_size">5</property>           <!-- 最小连接池数 默认 3 -->
    <property name="hibernate.c3p0.max_size">30</property>          <!-- 最大连接池数 默认 20-->
    <property name="hibernate.c3p0.timeout">20000</property>        <!-- 连接空闲时间 默认 0-->
    <property name="hibernate.c3p0.max_statements">2000</property>  <!-- PreparedStatement 缓存数-->
    <property name="hibernate.c3p0.acquire_increment">3</property>  <!-- 连接池数用尽后，一次生成几个连接 默认 3-->
    <property name="hibernate.c3p0.idle_test_period">10000</property> <!-- 每隔多少秒测试所有空闲连接 -->
    <!-- 配置c3p0 结束 -->
    <!-- 事务隔离设置 -->
    <!--<property name="hibernate.connection.isolation"></property>-->

    <!-- 连接处理方式
      IMMEDIATE_ACQUISITION_AND_HOLD： 在connection有需要时，立即回收获得，保持到session关闭

      DELAYED_ACQUISITION_AND_HOLD： 在connection有需要时，尽快回收，然后保持，直接session关闭

      DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT： 在connection有需要时，在执行每个语句后，尽快回收

      DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION： 在connection有需要时，在执行每个事务后，尽快回收
    -->
    <property name="hibernate.connection.handling_mode">IMMEDIATE_ACQUISITION_AND_HOLD</property>

    <!-- jdbc 批处理
        <= 0： 禁用批处理语句
     -->
    <property name="hibernate.jdbc.batch_size">10</property>

    <!-- 方言 -->
    <property name="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</property>

    <!-- 事务处理方式
      1. jdbc
      2. jta 需要实现org.hibernate.resource.transaction.TransactionCoordinatorBuilder
    -->
    <property name="hibernate.transaction.coordinator_class">jdbc</property>

    <property name="hibernate.show_sql">true</property>
    <property name="hibernate.format_sql">true</property>

    <property name="hibernate.hbm2ddl.auto">update</property>
    <!--
      自定义连接器提供者类
    -->
    <!--<property name="hibernate.connection.provider_class">com.lilongsha</property>-->

    <!-- session 策略-->
    <!--
      hibernate.current_session_context_class:
      自定义实现org.hibernate.context.spi.CurrentSessionContext
      jta
      thread
      managed
    -->
    <!--<property name="hibernate.current_session_context_class"></property>-->
    <property name="hibernate.event.merge.entity_copy_observer">disallow</property>
    <!-- 非临时表批量ID策略
      InlineIdsInClauseBulkIdStrategy
      InlineIdsSubSelectValueListBulkIdStrategy
      InlineIdsOrClauseBulkIdStrategy
      CteValuesListBulkIdStrategy
    -->
    <property name="hibernate.hql.bulk_id_strategy">org.hibernate.hql.spi.id.inline.InlineIdsInClauseBulkIdStrategy</property>
    <!-- 二级缓存
      hibernate.cache.region.factory_class: 用于声明要使用的缓存程序
      hibernate.cache.use_second_level_cache: 整体启用或禁用二级缓存，默认情况下如果当前配置RegionFactory的不是NoCachingRegionFactory，则将启用二级缓存。否则，将禁用二级缓存。
      hibernate.cache.use_query_cache: 启用或禁用查询结果的二级缓存。默认 false
      hibernate.cache.query_cache_factory: 指定查询结果缓存处理工厂
      hibernate.cache.use_minimal_puts: 优化二级缓存操作
      hibernate.cache.region_prefix: 二级缓存名称前缀
      hibernate.cache.default_cache_concurrency_strategy: 指定二级缓存使用的并发策略，1：read-only; 2: read-write; 3: nonstrict-read-write; 4: transactional
      hibernate.cache.use_structured_entries: 如果为true，对数据进行格式化存储，易于用户查看，但对于性能会产生影响
      hibernate.cache.auto_evict_collection_cache: 当关联仅从拥有方更改时，启用或禁用双向关联的集合缓存条目的自动驱逐。默认情况下禁用此功能，因为它会对跟踪此状态产生性能影响。但是，如果您的应用程序不管理双向高速缓存收集方的双向关联，则替代方法是在该高速缓存中保存陈旧的数据。
      hibernate.cache.use_reference_entries: 为只读或不可变实体，将实体引用直接存储到二级缓存中
      hibernate.cache.keys_factory: 格式化缓存键值，仅当多租户时，才存在意义 1. default; 2. simple; 3. org.hibernate.cache.spi.CacheKeysFactory
     -->
    <!-- hibernate ehcache start -->
    <!-- 缓存工厂策略
      ehcache：EhCacheRegionFactory
      ehcache-singleton: SingletonEhCacheRegionFactory
     -->
    <property name="hibernate.cache.region.factory_class">ehcache</property>
    <property name="hibernate.cache.use_second_level_cache">true</property>
    <property name="hibernate.cache.use_query_cache">true</property>
    <!-- hibernate ehcache end -->
    <!-- hibernate jcache start jcache配置未完成-->
    <!--<property name="hibernate.cache.region.factory_class">jcache</property>
    <property name="hibernate.cache.use_second_level_cache">true</property>
    <property name="hibernate.cache.use_query_cache">true</property>-->
    <!-- hibernate jcache end -->

<!--    <mapping package="cn.fangjiang.hibernate.domain"/>-->
    <mapping class="cn.lilongsha.hibernate.domain.Person" />
    <mapping class="cn.lilongsha.hibernate.domain.Phone" />
    <mapping class="cn.lilongsha.hibernate.domain.Call" />
    <mapping class="cn.lilongsha.hibernate.domain.Payment" />
    <mapping class="cn.lilongsha.hibernate.domain.CreditCardPayment" />
    <mapping class="cn.lilongsha.hibernate.domain.WireTransferPayment" />
  </session-factory>
</hibernate-configuration>